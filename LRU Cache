class LRUCache:
        
    def __init__(self,cap):

        self.cap=cap
        self.key_q = []
        self.value_q = []
        self.count = cap

    def get(self, key):

        if key in self.key_q:
            Index = self.key_q.index(key)
            return(self.value_q[Index])
        else:
            return -1

    def set(self, key, value):
        if(self.count<=0):
            self.key_q.pop(0)
            self.value_q.pop(0)
            self.key_q.append(key)
            self.value_q.append(value)
        else:
            self.key_q.append(key)
            self.value_q.append(value)
            self.count = self.count - 1

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        cap = int(input())  # capacity of the cache
        qry=int(input())  #number of queries
        a = list(map(str, input().strip().split()))  # parent child info in list
        
        lru=LRUCache(cap)
        
        i=0
        q=1
        while q<=qry:
            qtyp=a[i]
            
            if qtyp=='SET':
                lru.set(int(a[i+1]),int(a[i+2]))
                i+=3
            elif qtyp=='GET':
                print(lru.get(int(a[i+1])),end=' ')
                i+=2
            q+=1
        print()
